How to Set up a Yii Project.

Database settings MySQL:

1. Change the "return" statement thus in config\db.php using the correct DATABASE_NAME:

    return [
        'class' => 'yii\db\Connection',
        'dsn' => 'mysql:host=localhost;dbname=DATABASE_NAME',
        // Change username & password as required
        'username' => 'root',
        'password' => '2504',
        'charset' => 'utf8',
    ];


CDN BootStrap settings:

1. add the following to "components => [ request => [ " in config\web.php:

    //  This makes Yii2 get the libraries from CDN
    'assetManager' => [
      'bundles' => [
        'yii\web\JqueryAsset' => [
          'sourcePath' => null,
          'js' => ['//ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js'] // we'll take JQuery from CDN
        ],
        'yii\bootstrap\BootstrapPluginAsset' => [
          'sourcePath' => null,
          'js' => ['maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js'] // Bootstrap.js from CDN
        ],
        'yii\bootstrap\BootstrapAsset' => [
          'sourcePath' => null,
          'css' => ['//maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css',
            '//maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css'] // customized BS styles - optional
        ],
      /* 'nodge\eauth\assets\WidgetAssetBundle' => [
        'css' => [], // and now we disable EAuth asset css, because we're planning to use our own styles. Js files remain untouched.   ???
        ], */
      ],
    ],


Parameters - Email

1. Open config\params.php
2. add/change the following lines to the "return" statement (using the correct email addresses):

  'adminEmail' => 'john@jqlmdg.com',
  'supportEmail' => 'john@jqlmdg.com',
  // RBAC requirement
  'user.passwordResetTokenExpire' => 3600,


Cleaner URLs

1. add the following to "components => [  " in config\web.php:

    //  Remove index.php and the HEX from the URI
    'urlManager' => [
      'showScriptName' => false,
      'enablePrettyUrl' => true
      ],

2. create an .htaccess file in the web folder:

  RewriteEngine on
 
  # If a directory or a file exists, use it directly
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  # Otherwise forward it to index.php
  RewriteRule . index.php


Internationalisation

1. add the following BEFORE "components => [ request => [ " in config\web.php (note: 'sourceLanguage' should always be 'en_GB' for me):

 'language' => 'en_GB',
  'sourceLanguage' => 'en_GB',
 
2. add the following:

  TODO


Create a USER system

1. create a User table using this MySQL (or use the yii migrate/create with the info in Yii_Advanced):

CREATE TABLE `user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
  `auth_key` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
  `password_hash` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `password_reset_token` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `email` varchar(255) COLLATE utf8_unicode_ci NOT NULL,
  `status` smallint(6) NOT NULL DEFAULT '10',
  `created_at` int(11) NOT NULL,
  `updated_at` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

2. copy the following from USER.PHP in the advanced template into USER.PHP in the basic template replacing what's there:

    use Yii;
    use yii\base\NotSupportedException;
    use yii\behaviors\TimestampBehavior;
    use yii\db\ActiveRecord;
    use yii\web\IdentityInterface;
    /**
     * User model
     *
     * @property integer $id
     * @property string $username
     * @property string $password_hash
     * @property string $password_reset_token
     * @property string $email
     * @property string $auth_key
     * @property integer $status
     * @property integer $created_at
     * @property integer $updated_at
     * @property string $password write-only password
     */
    class User extends ActiveRecord implements IdentityInterface
    {
        const STATUS_DELETED = 0;
        const STATUS_ACTIVE = 10;

        /**
         * @inheritdoc
         */
        public static function tableName()
        {
            return '{{%user}}';
        }

        /**
         * @inheritdoc
         */
        public function behaviors()
        {
            return [
                TimestampBehavior::className(),
            ];
        }

        /**
         * @inheritdoc
         */
        public function rules()
        {
            return [
                ['status', 'default', 'value' => self::STATUS_ACTIVE],
                ['status', 'in', 'range' => [self::STATUS_ACTIVE, self::STATUS_DELETED]],
            ];
        }

        /**
         * @inheritdoc
         */
        public static function findIdentity($id)
        {
            return static::findOne(['id' => $id, 'status' => self::STATUS_ACTIVE]);
        }

        /**
         * @inheritdoc
         */
        public static function findIdentityByAccessToken($token, $type = null)
        {
            throw new NotSupportedException('"findIdentityByAccessToken" is not implemented.');
        }

        /**
         * Finds user by username
         *
         * @param string $username
         * @return static|null
         */
        public static function findByUsername($username)
        {
            return static::findOne(['username' => $username, 'status' => self::STATUS_ACTIVE]);
        }

        /**
         * Finds user by password reset token
         *
         * @param string $token password reset token
         * @return static|null
         */
        public static function findByPasswordResetToken($token)
        {
            if (!static::isPasswordResetTokenValid($token)) {
                return null;
            }

            return static::findOne([
                'password_reset_token' => $token,
                'status' => self::STATUS_ACTIVE,
            ]);
        }

        /**
         * Finds out if password reset token is valid
         *
         * @param string $token password reset token
         * @return boolean
         */
        public static function isPasswordResetTokenValid($token)
        {
            if (empty($token)) {
                return false;
            }
            $expire = Yii::$app->params['user.passwordResetTokenExpire'];
            $parts = explode('_', $token);
            $timestamp = (int) end($parts);
            return $timestamp + $expire >= time();
        }

        /**
         * @inheritdoc
         */
        public function getId()
        {
            return $this->getPrimaryKey();
        }

        /**
         * @inheritdoc
         */
        public function getAuthKey()
        {
            return $this->auth_key;
        }

        /**
         * @inheritdoc
         */
        public function validateAuthKey($authKey)
        {
            return $this->getAuthKey() === $authKey;
        }

        /**
         * Validates password
         *
         * @param string $password password to validate
         * @return boolean if password provided is valid for current user
         */
        public function validatePassword($password)
        {
            return Yii::$app->security->validatePassword($password, $this->password_hash);
        }

        /**
         * Generates password hash from password and sets it to the model
         *
         * @param string $password
         */
        public function setPassword($password)
        {
            $this->password_hash = Yii::$app->security->generatePasswordHash($password);
        }

        /**
         * Generates "remember me" authentication key
         */
        public function generateAuthKey()
        {
            $this->auth_key = Yii::$app->security->generateRandomString();
        }

        /**
         * Generates new password reset token
         */
        public function generatePasswordResetToken()
        {
            $this->password_reset_token = Yii::$app->security->generateRandomString() . '_' . time();
        }

        /**
         * Removes password reset token
         */
        public function removePasswordResetToken()
        {
            $this->password_reset_token = null;
        }
    }

3. Add the following to views/login.php after the remember me checkbox

                <div style="color:#999;margin:1em 0">
                    If you forgot your password you can <?= Html::a('reset it', ['site/request-password-reset']) ?>.
                </div>



RBAC settings:

1. add the following to "components => [ request => [ " in config\web.php:

    //  RBAC
    'authManager' => [
      'class' => 'yii\rbac\DbManager',
    ],

2. add the following AFTER "components => [ request => [ " but BEFORE " 'params' => $params," in config\web.php:

  //  RBAC - seems to cause an error if not after components
  'modules' => [
    'admin' => [
      'class' => 'mdm\admin\Module',
    ],
  ],
  'as access' => [
    'class' => 'mdm\admin\components\AccessControl',
    'allowActions' => [
      'site/*', // add or remove allowed actions to this list
    ]
  ],

3. See Parameters above for the PasswordResetToken

4. Change the console.php file thus:

    <?php

    Yii::setAlias('@tests', dirname(__DIR__) . '/tests');

    $params = require(__DIR__ . '/params.php');
    $db = require(__DIR__ . '/db.php');

    return [
      'id' => 'basic-console',
      'basePath' => dirname(__DIR__),
      'bootstrap' => ['log', 'gii'],
      'controllerNamespace' => 'app\commands',
      'modules' => [
        'gii' => 'yii\gii\Module',
        'class' => 'mdm\admin\Module',
      ],
      'components' => [
        'cache' => [
          'class' => 'yii\caching\FileCache',
        ],
        'log' => [
          'targets' => [
            [
              'class' => 'yii\log\FileTarget',
              'levels' => ['error', 'warning'],
            ],
          ],
        ],
        'db' => $db,
        //  RBAC
        'authManager' => [
          'class' => 'yii/rbac/DbManager',
        ],
        'as access' => [
            'class' => 'mdm\admin\components\AccessControl',
        'allowActions' => [
          'site/*', // add or remove allowed actions to this list
        ]
        ],
      ],
      'params' => $params,
    ];

5. 


=================================================
The WEB.PHP file should look something like this:

<?php

$params = require(__DIR__ . '/params.php');

$config = [
  'id' => 'basic',
  'basePath' => dirname(__DIR__),
  'bootstrap' => ['log'],
  
  'language' => 'en_GB',
  'sourceLanguage' => 'en_GB',
  
  'components' => [
    'request' => [
      // !!! insert a secret key in the following (if it is empty) - this is required by cookie validation (note the secret key should be different!)
      'cookieValidationKey' => 'KIIukVOFKVp2QzioFDYUn7tH9NjSOmV4',
    ],
    'cache' => [
      'class' => 'yii\caching\FileCache',
    ],
    'user' => [
      'identityClass' => 'app\models\User',
      'enableAutoLogin' => true,
    ],
    'errorHandler' => [
      'errorAction' => 'site/error',
    ],
    'mailer' => [
      'class' => 'yii\swiftmailer\Mailer',
      // send all mails to a file by default. You have to set
      // 'useFileTransport' to false and configure a transport
      // for the mailer to send real emails.
      'useFileTransport' => false,
    ],
    'log' => [
      'traceLevel' => YII_DEBUG ? 3 : 0,
      'targets' => [
        [
          'class' => 'yii\log\FileTarget',
          'levels' => ['error', 'warning'],
        ],
      ],
    ],
    'db' => require(__DIR__ . '/db.php'),
    //  Remove HEX from the URI
    'urlManager' => ['enablePrettyUrl' => true],
    //  RBAC
    'authManager' => [
      'class' => 'yii\rbac\DbManager',
    ],
    //  This makes Yii2 get the libraries from CDN
    'assetManager' => [
      'bundles' => [
        'yii\web\JqueryAsset' => [
          'sourcePath' => null,
          'js' => ['//ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js'] // we'll take JQuery from CDN
        ],
        'yii\bootstrap\BootstrapPluginAsset' => [
          'sourcePath' => null,
          'js' => ['maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js'] // Bootstrap.js from CDN
        ],
        'yii\bootstrap\BootstrapAsset' => [
          'sourcePath' => null,
          'css' => ['//maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css',
            '//maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css'] // customized BS styles
        ],
      /* 'nodge\eauth\assets\WidgetAssetBundle' => [
        'css' => [], // and now we disable EAuth asset css, because we're planning to use our own styles. Js files remain untouched.   ???
        ], */
      ],
    ],
  ],
  //  RBAC - seems to cause an error if not after componentsexi
  'modules' => [
    'admin' => [
      'class' => 'mdm\admin\Module',
    ],
  ],
  'as access' => [
    'class' => 'mdm\admin\components\AccessControl',
    'allowActions' => [
      'site/*', // add or remove allowed actions to this list
    ]
  ],
  'params' => $params,
];

if (YII_ENV_DEV) {
  // configuration adjustments for 'dev' environment
  $config['bootstrap'][] = 'debug';
  $config['modules']['debug'] = 'yii\debug\Module';

  $config['bootstrap'][] = 'gii';
  $config['modules']['gii'] = 'yii\gii\Module';
}

return $config;
